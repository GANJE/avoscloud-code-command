#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var lib = path.join(path.dirname(fs.realpathSync(__filename)), '../lib');
var exec = require('child_process').exec;
var fstream = require('fstream'),
tar = require('tar'),
zlib = require('zlib');
var os = require('os');
var _s = require('underscore.string'),
_ = require('underscore');
var http = require('http');
var program = require('commander');
var AV = require('avoscloud-sdk').AV;
var qiniu = require('qiniu');
var util = require(lib + '/util');
var readline = require('readline');
var AdmZip = require('adm-zip');

//AV.serverURL = 'http://cn-stg1.avoscloud.com';

var tmpdir = os.tmpdir();
if (!tmpdir.match(/.*\/$/)) {
	tmpdir = tmpdir + "/";
}

var version = JSON.parse(fs.readFileSync(path.join(path.dirname(fs.realpathSync(__filename)), "../package.json"))).version;
program
	.version(version)
	.usage("[options] <cmd> \n\n  Valid commands: \n    deploy: 部署云代码到AVOS Cloud平台开发环境. \n    undeploy: 从AVOS Cloud平台清除云代码部署，包括生产环境和开发环境. \n    status: 查询当前部署状态.\n    search <keyword>: 根据关键字查询开发文档.\n    publish: 发布开发环境代码到生产环境。 \n    new: 创建云代码项目。")
	.option('-f,--filepath <path>', '本地云代码项目根路径，默认是当前目录。')
	.option('-g, --git', '使用定义在管理平台的Git仓库或者-u指定的Git仓库部署云代码，默认使用本地代码部署。')
	.option('-u, --giturl <url>', '所要部署的Git仓库地址，必须是Git协议URL，仅在使用Git部署-g选项的时候有效.')
	.option('-l, --local', '使用本地代码部署云代码，该选项是默认选中。')
	.option('-o, --log <log>', '部署日志，仅对从本地部署有效。')
	.option('-r, --revision <revision>', 'Git的版本号，仅对从Git仓库部署有效。')
	.parse(process.argv);

function initMasterKey(done) {
	var home = process.env['HOME'];
	if (!home)
		throw "Could not find user home directory";
	var avoscloudKeysFile = home + '/.avoscloud_keys'
	fs.exists(avoscloudKeysFile, function(exists) {
		writeMasterKey = function(data, cb) {
			var rl = readline.createInterface({
				input: process.stdin,
				output: process.stdout
			});
			rl.question("请输入应用的Master Key(可从开发者平台的应用设置里找到):", function(answer) {
				if (!answer || answer.trim() == '')
					throw "无效的master key."
				data = data || {}
				data[AV.applicationId] = answer;
				//file mode is 0600
				fs.writeFile(avoscloudKeysFile, JSON.stringify(data), {
					mode: 384
				}, function(err) {
					if (err)
						throw err;
					cb(answer);
					rl.close();
				});
			});
		};
		readMasterKey = function() {
			fs.readFile(avoscloudKeysFile, 'utf-8', function(err, data) {
				if (err)
					throw err;
				var keys = JSON.parse(data);
				var masterKey = keys[AV.applicationId];
				if (!masterKey) {
					writeMasterKey(keys, function(masterKey) {
						AV.initialize(AV.applicationId, masterKey);
						done();
					});
				} else {
					AV.initialize(AV.applicationId, masterKey);
					done();
				}
			});
		}
		if (exists) {
			readMasterKey();
		} else {
			writeMasterKey(null, function(masterKey) {
				AV.initialize(AV.applicationId, masterKey);
				done();
			});
		}
	});
}

function uploadFile(localFile, applicationId, cb) {
	var key = util.guid() + '.tar.gz';
	util.requestCloud("qiniu", {
		key: key,
		name: localFile,
		mime_type: 'application/x-gzip, application/octet-stream'
	}, 'POST', {
		success: function(resp) {
			var uptoken = resp.token;
			if (!uptoken) {
				if (cb) {
					cb(JSON.parse(resp.responseText).error);
					return
				}
			}
			qiniu.io.put(uptoken, key, fs.readFileSync(localFile), null, function(err, ret) {
				if (cb) {
					cb(err, 'http://paas-files.qiniudn.com/' + (ret ? ret.key : '404.html'), resp.objectId);
				}
			});
		},
		error: function(err) {
			if (cb) {
				cb(err);
			}
		}
	});
}

function deployLocalCloudCode(cloudPath) {
	initMasterKey(function() {
		console.log("Compress cloud code files...");
		var file = tmpdir + new Date().getTime() + '.tar.gz';
		var count = 0;

		fstream.Reader({
			'root': cloudPath,
			'path': cloudPath,
			'type': 'Directory',
			filter: function() {
				count++;
				if (count == 1) {
					//the root folder.
					return true;
				}
				var filePath = path.normalize(this.path);
				return _.find(['cloud', 'public', 'config'], function(folder) {
					return _s.startsWith(filePath, cloudPath + folder);
				});
			}
		}).pipe(tar.Pack({
			path: '/'
		}))
			.pipe(zlib.Gzip())
			.pipe(fstream.Writer({
				'path': file
			}))
			.on('close', function() {
				console.log("Wrote compressed file " + file + ' ...');
				//upload file to cloud code
				console.log("Begin to upload cloud code files...");
				uploadFile(file, AV.applicationId, function(err, url, fileId) {
					if (err) {
						console.log("Upload cloud code files failed with '%j'", (JSON.parse(err.responseText).error));
						process.exit(1);
					} else {
						console.log("Upload cloud code files successfully.Begin to deploy...");
						//notify avoscloud platform to fetch new deployment.
						util.requestCloud('functions/deploy/command', {
							revision: url,
							fileId: fileId,
							log: program.log
						}, 'POST', {
							success: function(resp) {
								console.log("Congrats! Deploy cloud code successfully.");
								queryStatus();
							},
							error: function(err) {
								console.log("Sorry, try to deploy cloud code failed with '%s'", (JSON.parse(err.responseText).error));
							}
						}, true);
					}
				});
			});
	});
}

function deployGitCloudCode(revision) {
	initMasterKey(function() {
		console.log('Deploy cloud code from git repository...');
		util.requestCloud('functions/deploy/command', {
			url: program.giturl
		}, 'POST', {
			success: function(resp) {
				console.log("Congrats!Deployed cloud code from git repository successfully.");
				queryStatus();
			},
			error: function(err) {
				console.log("Deployed cloud code from git repository failed with '%j'", (JSON.parse(err.responseText).error));
			}
		}, true);
	});
}

function outputStatus(status) {
	console.log('------------------------------------------------------------------------');
	console.log("Development    version:  '" + status.dev + "'");
	console.log("Development commit log:  '" + status.devLog + "'");
	console.log("Production     version:  '" + status.prod + "'");
	console.log("Production  commit log:  '" + status.prodLog + "'");
}

function publishCloudCode() {
	initMasterKey(function() {
		console.log('Publishing cloud code to production...');
		util.requestCloud('functions/publishFunctions', {}, 'GET', {
			success: function(resp) {
				console.log("Published cloud code successfully. the status is :");
				outputStatus(resp);
			},
			error: function(err) {
				console.log("Published cloud code failed with '%j'", (JSON.parse(err.responseText).error));
			}
		}, true);
	});
}

function queryStatus() {
	initMasterKey(function() {
		util.requestCloud('functions/status', {}, 'GET', {
			success: function(resp) {
				console.log("Cloud code status is : ");
				outputStatus(resp);
			},
			error: function(err) {
				console.log("Query cloud code status failed with '%j'", (JSON.parse(err.responseText).error));
			}
		}, true);
	});
}

function undeployCloudCode() {
	initMasterKey(function() {
		util.requestCloud('functions/undeploy/repo', {}, 'POST', {
			success: function(resp) {
				console.log("Undeployed cloud code successfully.");
				queryStatus();
			},
			error: function(err) {
				console.log("Undeployed cloud code status failed with '%j'", (JSON.parse(err.responseText).error));
			}
		}, true);
	});
}

var cmd = program.args[0];
var cloudPath = path.resolve(program.filepath || './');

if (!cloudPath.match(/.*\/$/)) {
	cloudPath = cloudPath + "/";
}
console.log('[INFO]: Cloud Code Project Root Directory:' + cloudPath);
process.chdir(cloudPath);



var rl = null;

function input(info, cb) {
	if (!rl)
		rl = readline.createInterface({
			input: process.stdin,
			output: process.stdout
		});
	rl.question(info, function(answer) {
		cb(answer);
	});
}

function createNewProject() {
	console.log("开始输入应用信息，这些信息可以从'开发者平台的应用设置->应用key'里找到。")
	input("请输入应用的Application Id:  ", function(appId) {
		if (!appId || appId.trim() == '')
			throw "无效的application id."
		input("请输入应用的Master Key: ", function(masterKey) {
			if (!masterKey || masterKey.trim() == '')
				throw "无效的master key."
			input("选择您的应用类型(标准版或者web主机版): [standard(S) or web(W)]", function(type) {
				rl.close();
				type = type || 'S'
				var params = '';
				if (type.toUpperCase() == 'W' || type.toUpperCase() == 'WEB') {
					params = '&webHosting=true';
				}
				console.log("Creating project...");
				AV.initialize(appId, masterKey);
				var url = AV.serverURL;
				if (url.charAt(url.length - 1) !== "/") {
					url += "/";
				}
				url += "1/" + 'functions/skeleton?appId=' + appId + "&appKey=" + masterKey + params;
				var file = tmpdir + appId + '.zip';
				exec("curl '" + url + "' > " + file, function(err) {
					if (err)
						throw err;
					var zip = new AdmZip(file),
					zipEntries = zip.getEntries();
					zip.extractAllTo('./', false);
					console.log("Create project done!");
				});
			});
		});
	});
}

function initAVOSCloudSDK() {
	if (fs.existsSync(cloudPath + 'config/global.json')) {
		//try to initialize avoscloud sdk.
		var data = JSON.parse(fs.readFileSync(cloudPath + 'config/global.json', {
			encoding: 'utf-8'
		}));
		if (!data || !data.applicationId || !data.applicationKey){
			console.log("[ERROR]: Can't initialize AVOS Cloud SDK,please provide config/global.json contains app id and app key.");
			program.help();
		}
		AV.initialize(data.applicationId, data.applicationKey);
	} else {
		console.log("[ERROR]: Can't initialize AVOS Cloud SDK.Could not find 'config/global.json'.");
		program.help();
	}
}

if (!cmd) {
	initAVOSCloudSDK();
	require(lib + '/mock').run(cloudPath);
	console.log("请使用浏览器打开(建议使用非IE浏览器，如Chrome,Firefox等):'http://localhost:3000/avos'.");
} else {
	if (cmd != 'new') {
		initAVOSCloudSDK();
	}
	switch (cmd) {
	case "search":
		if (!program.args[1]) {
			console.log("Useage: avoscloud search <keyword>");
			process.exit(1);
		}
		program.args.shift();
		exec('open https://cn.avoscloud.com/search.html?q=' + encodeURIComponent(program.args.join(' ')));
		break;
	case "deploy":
		if (program.git) {
			deployGitCloudCode(program.revision || 'master');
		} else {
			deployLocalCloudCode(cloudPath);
		}
		break;
	case "undeploy":
		undeployCloudCode();
		break;
	case "publish":
		publishCloudCode();
		break;
	case "status":
		queryStatus();
		break
	case 'new':
		createNewProject();
		break;
	default:
		program.help();
		break;
	}
}
